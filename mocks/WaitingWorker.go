// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// WaitingWorker is an autogenerated mock type for the WaitingWorker type
type WaitingWorker struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WaitingWorker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishedAt provides a mock function with given fields:
func (_m *WaitingWorker) FinishedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Force provides a mock function with given fields:
func (_m *WaitingWorker) Force() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Running provides a mock function with given fields:
func (_m *WaitingWorker) Running() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StartedAt provides a mock function with given fields:
func (_m *WaitingWorker) StartedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *WaitingWorker) Wait() {
	_m.Called()
}
